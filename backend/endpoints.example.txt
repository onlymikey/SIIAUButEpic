EL SIGUIENTE TXT MUESTRA DEBEN SER LOS BODYS DEL REQUEST, LOS CUALES SON JSON,
Y QUE ES LO QUE DEVUELVEN AL REALIZAR LA SOLICITUD (tambien puede anexar ejemplos de respuestas de error).

Organizado por models(despues de la url base api/):
*****************************************************************
*********                                       *****************
*********                USERS                  *****************
*********                                       *****************
*****************************************************************

**********************endpoint: users/*********************************************************************
método: POST
descripción: crea un usuario.
body JSON:
{
    "career" : 1, (only obligatory for students)
    "name" : "Lola",
    "username" : "LALA",
    "email" : "examp@examp.com",
    "password" : "holaMundo8Cara",
    "father_last_name" : "Palma",
    "mother_last_name" : "Lopez",
    "birthdate" : "10-10-2024", (only obligatory for students)
    "studies_degree" : "Doctorado", (only obligatory for teachers)
    "role" : "teacher"
}
respuesta para este request:
{
    "id": 1,
    "username": "a",
    "birthdate": "10/10/2024",
    "email": "b@examp.com",
    "name": "Lola",
    "studies_degree": "Doctorado",
    "father_last_name": "Palma",
    "mother_last_name": "Lopez",
    "role": "student",
    "career": 1
}
status:201




***********************************************endpoint: users/*******************************************
método: GET
descripción: Obtiene un json que lista TODOS los usuarios.
body JSON: empty
respuesta para este request:
{
    "id": 1,
    "username": "a",
    "birthdate": "10/10/2024",
    "email": "b@examp.com",
    "name": "Lola",
    "studies_degree": "Doctorado",
    "father_last_name": "Palma",
    "mother_last_name": "Lopez",
    "role": "student",
    "career": 1
},
{
    "id": 2,
    "username": "a",
    "birthdate": "10/10/2024",
    "email": "b@examp.com",
    "name": "Lola",
    "studies_degree": "Doctorado",
    "father_last_name": "Palma",
    "mother_last_name": "Lopez",
    "role": "student",
    "career": 1
},
{
    "id": 3,
    "username": "a",
    "birthdate": "10/10/2024",
    "email": "b@examp.com",
    "name": "Lola",
    "studies_degree": "Doctorado",
    "father_last_name": "Palma",
    "mother_last_name": "Lopez",
    "role": "student",
    "career": 1
},
...
status:200
(si no hay usuarios el status es el mismo; el json estara vacio).




*********************************************users/<int:PK>/********************************************************
método: GET
descripción: Obtiene un usuario en especifico.
body JSON: empty
respuesta para este request:
{
    "id": 1,
    "username": "student01",
    "birthdate": "2000-01-01",
    "email": "student01@example.com",
    "name": "John",
    "studies_degree": "Bachelor",
    "father_last_name": "Doe",
    "mother_last_name": "Smith",
    "role": "student",
    "career": 2
}
status:200
respuesta de error:
{
    "detail": "Not found."
}
descripción: no se ha encontrado al user con ese id
status:404





*********************************************users/<int:PK>/********************************************************
método: PUT
descripción: Actualiza un usuario.
body JSON:
{
    "username": "updated_user",
    "birthdate": "1999-05-10",
    "email": "updated_user@example.com",
    "name": "Updated Name",
    "studies_degree": "Master",
    "father_last_name": "Updated Last Name",
    "mother_last_name": "Smith",
    "role": "teacher",
    "career": 3,
    "is_active" : 0 (boolean)
}
respuesta para este request:
{
    "id": 1,
    "username": "updated_user",
    "birthdate": "1999-05-10",
    "email": "updated_user@example.com",
    "name": "Updated Name",
    "studies_degree": "Master",
    "father_last_name": "Updated Last Name",
    "mother_last_name": "Smith",
    "role": "teacher",
    "career": 3,
    "is_active" : 0 (boolean)
}
status:200




************************************************users/<int:PK>/**************************************************************
método: DELETE
descripción: Elimina un usuario.
body JSON: empty
respuesta para este request: vacio
status:204
respuesta de error:
{
    "detail": "Not found."
}
descripción: no se ha encontrado un user con ese id
status:404




*************************************************users/next-id/***************************************************************
método: GET
descripción: Obtiene el id que sera asignado al siguiente user a registrar.
body JSON: empty
respuesta para este request:
{
    "next_id" : 1
}
status:200





**************************************************login/*******************************************************************
método: POST
descripción: Se logea en el sistema.
body JSON:
{
    "username" : "Lol",
    "password" : "holaMundo8Cara"
}
respuesta para este request:
{
    "refresh": <refresh_token>,
    "access": "<acces_token>",
    "user": {
        "id": 1,
        "username": "abc",
        "birthdate": "10/10/2024",
        "email": "bcd@examp.com",
        "name": "Lola",
        "studies_degree": "Doctorado",
        "father_last_name": "Palma",
        "mother_last_name": "Lopez",
        "role": "teacher",
        "career": null
    }
}
status:200
respuesta de error:
{
    "detail": "Credenciales incorrectas"
}
descripción: Alguno de los datos son incorrectos.
status:401





*****************************************************************
*********                                       *****************
*********                CAREERS                *****************
*********                                       *****************
*****************************************************************

**************************************************careers/**************************************************************
método: POST
descripción: Se crea una nueva carrera.
body JSON:
{
    "name" : "Física",
    "semester_quantity" : 10
}
respuesta para este request:
{
    "id": 1,
    "name": "Ingenieria en sistemas computacionales",
    "semester_quantity": 10
}
status:201


****************************************************careers/*************************************************************
método: GET
descripción: Obtener todas las carreras.
body JSON: empty
respuesta para este request:
{
    "id": 1,
    "name": "Ingenieria en sistemas computacionales",
    "semester_quantity": 10
},
{
    "id": 2,
    "name": "Ingenieria en sistemas computacionales",
    "semester_quantity": 10
},
{
    "id": 3,
    "name": "Ingenieria en sistemas computacionales",
    "semester_quantity": 10
},
...
status:200




*****************************************************careers/<int:PK>/**************************************************
método: GET
descripción: Obtiene una carrera en especifico.
endpoint example: careers/1/
body JSON: empty
respuesta para este request:
{
    "id": 1,
    "name": "Ingenieria en sistemas computacionales",
    "semester_quantity": 10
}
status:200



*****************************************************careers/<int:PK>/**************************************************
método: PUT
descripción: Edita una carrera en especifico.
endpoint example: careers/1/
body JSON:
{
    "name": "Ingenieria en sistemas computacionales cabrones",
    "semester_quantity": 10
}
respuesta para este request:
{
    "id": 1,
    "name": "Ingenieria en sistemas computacionales cabrones",
    "semester_quantity": 10
}
status:200



************************************************careers/<int:PK>/**************************************************************
método: DELETE
descripción: Elimina la carrera.
body JSON: empty
endpoint example: careers/1/
respuesta para este request: vacio
status:204
respuesta de error:
{
    "detail": "Not found."
}
descripción: no se ha encontrado un user con ese id
status:404




************************************************careers/next-id/**************************************************************
método: GET
descripción: Obtiene el id que sera asignado a la siguiente career a registrar.
body JSON: empty
respuesta para este request:
{
    "next_id" : 1
}
status:200





*****************************************************************
*********                                       *****************
*********                CLASSROOMS             *****************
*********                                       *****************
*****************************************************************

************************************************classrooms/**************************************************************
Método: POST
Descripción: Se crea un nuevo salón de clases.
Body JSON:
{
    "name": "A101",
    "floor": 1
}
Respuesta para este request:
{
    "id": 1,
    "name": "A101",
    "floor": 1
}
status:201




************************************************classrooms/**************************************************************
Método: GET
Descripción: Obtener todos los salones de clases.
Body JSON: empty
Respuesta para este request:
[
    {
        "id": 1,
        "name": "A101",
        "floor": 1
    },
    {
        "id": 2,
        "name": "B202",
        "floor": 2
    },
    {
        "id": 3,
        "name": "C303",
        "floor": 3
    }
]
status: 200



************************************************classrooms/<int:PK>/**************************************************************
Método: GET
Descripción: Obtiene un salón de clases en específico.
Endpoint Example: classrooms/1/
Body JSON: empty
Respuesta para este request:
{
    "id": 1,
    "name": "A101",
    "floor": 1
}
status: 200




************************************************classrooms/<int:PK>/**************************************************************
Método: PUT
Descripción: Edita un salón de clases en específico.
Endpoint Example: classrooms/1/
Body JSON:
{
    "name": "D404",
    "floor": 4
}

Respuesta para este request:
{
    "id": 1,
    "name": "D404",
    "floor": 4
}
status: 200




************************************************classrooms/<int:PK>/**************************************************************
Método: DELETE
Descripción: Elimina un salón de clases.
Endpoint Example: classrooms/1/
Body JSON: empty
Respuesta para este request: empty
status: 204
Respuesta de error para DELETE:
{
    "detail": "Not found."
}
Descripción: No se ha encontrado un salón de clases con ese ID.
status: 404



************************************************classrooms/next-id/**************************************************************
método: GET
descripción: Obtiene el id que sera asignado al siguiente classroom a registrar.
body JSON: empty
respuesta para este request:
{
    "next_id" : 1
}
status:200





*****************************************************************
*********                                       *****************
*********                ENROLLMENTS            *****************
*********                                       *****************
*****************************************************************

************************************************enrollments/**************************************************************
Método: POST
Descripción: Se crea una nueva inscripción.
Body JSON:
{
    "user": 1,
    "group": 1
}
Respuesta para este request:
{
    "id": 1,
    "user": 1,
    "group": 1
}
status: 201



************************************************enrollments/**************************************************************
Método: GET
Descripción: Obtener todas las inscripciones.
Body JSON: empty
Respuesta para este request:
[
    {
        "id": 1,
        "user": 1,
        "group": 1
    },
    {
        "id": 2,
        "user": 2,
        "group": 1
    },
    {
        "id": 3,
        "user": 3,
        "group": 2
    }
]
status: 200



************************************************enrollments/<int:pk>/**************************************************************
Método: GET
Descripción: Obtiene una inscripción en específico.
Endpoint Example: enrollments/1/
Body JSON: empty
Respuesta para este request:
{
    "id": 1,
    "user": 1,
    "group": 1
}
status: 200



************************************************enrollments/<int:pk>/**************************************************************
Método: PUT
Descripción: Edita una inscripción en específico.
Endpoint Example: enrollments/1/
Body JSON:
{
    "user": 2,
    "group": 2
}
Respuesta para este request:
{
    "id": 1,
    "user": 2,
    "group": 2
}
status: 200



************************************************enrollments/<int:pk>/**************************************************************
Método: DELETE
Descripción: Elimina una inscripción.
Endpoint Example: enrollments/1/
Body JSON: empty
Respuesta para este request: empty
Status: 204 No Content
Respuesta de error para DELETE:
{
    "detail": "Not found."
}
Descripción: No se ha encontrado una inscripción con ese ID.
Status: 404 Not Found


************************************************enrollments/by_user/<int:user_id>/**************************************************************
Método: GET
Descripción: Obtiene todas las inscripciones asociadas a un usuario específico.
<<<<<<<<<<<<<<<<<<<<<<<<<WORKING ON IT>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Status: 200



************************************************enrollments/next_id/**************************************************************
Método: GET
Descripción: Obtiene el ID que será asignado a la siguiente inscripción a registrar.
Body JSON: empty
Respuesta para este request:
{
    "next_id": 5
}
status: 200






*****************************************************************
*********                                       *****************
*********                  GROUPS               *****************
*********                                       *****************
*****************************************************************

************************************************groups/**************************************************************
Método: POST  
Descripción: Se crea un nuevo grupo junto con sus horarios.  
Body JSON:
{
    "name": "A101",
    "start_date": "15-11-2024", (formato:DD-MM-YYYY, fecha inicio<fecha fin)
    "end_date": "15-01-2025", (formato:DD-MM-YYYY)
    "subject": 1,
    "teacher": 2,
    "semester": "2024B", (semestre no debe ser menor a fecha inicio)
    "max_students": 30
}
Respuesta para este request:
{
    "message": "Grupo creado exitosamente",
    "group_id": 1
}
status: 201



************************************************groups/**************************************************************
Método: GET  
Descripción: Obtener todos los grupos. 
Body JSON: empty
Respuesta para este request:
[
    {
        "id": 1,
        "name": "A101",
        "start_date": "15-11-2024",
        "end_date": "15-01-2025",
        "subject": 1,
        "teacher": 2,
        "semester": "2024B",
        "quantity_students": 0,
        "max_students": 30
    },
    {
        "id": 2,
        "name": "B202",
        "start_date": "01-12-2024",
        "end_date": "01-02-2025",
        "subject": 2,
        "teacher": 3,
        "semester": "2024B",
        "quantity_students": 25,
        "max_students": 30
    }
]

status: 200



************************************************groups/int:PK/**************************************************************
Método: GET  
Descripción: Obtiene un grupo en específico.
Endpoint Example: groups/1/
Body JSON: empty
Respuesta para este request:
{
    "id": 1,
    "name": "A101",
    "start_date": "15-11-2024",
    "end_date": "15-01-2025",
    "subject": 1,
    "teacher": 2,
    "semester": "2024B",
    "quantity_students": 0,
    "max_students": 30
}
status: 200



************************************************groups/int:PK/**************************************************************
Método: PUT  
Descripción: Edita un grupo en específico.
Endpoint Example: groups/1/
Body JSON:
{
    "name": "C303",
    "start_date": "20-11-2024",
    "end_date": "20-01-2025",
    "subject": 3,
    "teacher": 4,
    "semester": "2024A",
    "max_students": 40
}
Respuesta para este request:
{
    "id": 1,
    "name": "C303",
    "start_date": "20-11-2024",
    "end_date": "20-01-2025",
    "subject": 3,
    "teacher": 4,
    "semester": "2024A",
    "quantity_students": 0,
    "max_students": 40
}
status: 200



************************************************groups/int:PK/**************************************************************
Método: DELETE  
Descripción: Elimina un grupo.
Endpoint Example: groups/1/
Body JSON: empty
Respuesta para este request: empty
status: 204
Respuesta de error para DELETE:
{
    "detail": "Not found."
}
Descripción: No se ha encontrado un grupo con ese ID.
status: 404


************************************************groups/next_id/**************************************************************
Método: GET  
Descripción: Obtiene el ID que será asignado al siguiente grupo a registrar.
Body JSON: empty
Respuesta para este request:
{
    "next_id": 3
}

status: 200


************************************************group/create/**************************************************************
Método: POST  
Descripción: Crea un grupo y sus horarios.
Body JSON:
{
    "name": "A101",
    "start_date": "15-11-2024", (formato:DD-MM-YYYY, fecha inicio<fecha fin)
    "end_date": "15-01-2025", (formato:DD-MM-YYYY)
    "subject": 1,
    "teacher": 2,
    "semester": "2024B", (semestre no debe ser menor a fecha inicio)
    "max_students": 30,
    "schedule1": {
        "day": "Monday",
        "start_time": "08:00", (no puede ser menor a 07:00)
        "end_time": "10:00", (no puede ser mayor a 19:00)
        "classroom": 1
    },
    "schedule2": {
        "day": "Wednesday",
        "start_time": "08:00", (no puede ser menor a 07:00)
        "end_time": "10:00", (no puede ser mayor a 19:00)
        "classroom": 1
    }
}
Respuesta para este request:
{
    "message": "Grupo y horarios creados exitosamente",
    "group_id": 1
}
status: 201




*****************************************************************
*********                                       *****************
*********                  SUBJECTS             *****************
*********                                       *****************
*****************************************************************


*************************************************subjects/**************************************************************
Método: POST
Descripción: Se crea una nueva materia.
Body JSON:
{
    "career": 1,
    "name": "Mathematics"
}
Respuesta para este request:
{
    "id": 1,
    "career": 1,
    "name": "Mathematics"
}
status: 201




*************************************************subjects/**************************************************************
Método: GET
Descripción: Obtener todas las materias.
Body JSON: empty
Respuesta para este request:
[
    {
        "id": 1,
        "career": 1,
        "name": "Mathematics"
    },
    {
        "id": 2,
        "career": 2,
        "name": "Physics"
    }
]
status: 200




*************************************************subjects/int:pk/**************************************************************
Método: GET
Descripción: Obtiene una materia específica.
Endpoint Example: subjects/1/
Body JSON: empty
Respuesta para este request:
{
    "id": 1,
    "career": 1,
    "name": "Mathematics"
}
status: 200



*************************************************subjects/int:pk/**************************************************************
Método: PUT
Descripción: Edita una materia específica.
Endpoint Example: subjects/1/
Body JSON:
{
    "career": 2,
    "name": "Advanced Mathematics"
}
Respuesta para este request:
{
    "id": 1,
    "career": 2,
    "name": "Advanced Mathematics"
}
status: 200



*************************************************subjects/int:pk/**************************************************************
Método: DELETE
Descripción: Elimina una materia.
Endpoint Example: subjects/1/
Body JSON: empty
Respuesta para este request: empty
status: 204
Respuesta de error para DELETE:
{
    "detail": "Not found."
}
Descripción: No se ha encontrado una materia con ese ID.
Status: 404 Not Found





*************************************************subjects/next_id/**************************************************************
Método: GET
Descripción: Obtiene el ID que será asignado a la siguiente materia a registrar.
Body JSON: empty
Respuesta para este request:
{
    "next_id": 3
}
status: 200
